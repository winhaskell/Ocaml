# let rec last = function
        | []     -> None
        | [x]    -> Some x
        | _ :: t -> last t;;
      
val last : 'a list -> 'a option = <fun>

#  last [ "a" ; "b" ; "c" ; "d" ];;
- : string option = Some "d"

# last [ "a" ; "b" ; "c" ; "d"; "e"];;
- : string option = Some "e"

# last [];;
- : 'a option = None


# let rec compress = function
    | a :: (b :: _ as t) -> if a = b then compress t else a :: compress t
        | smaller -> smaller;;
        
val compress : 'a list -> 'a list = <fun>

# compress ["a";"a";"a";"a";"b";"c";"c";"a";"a";"d";"e";"e";"e";"e"];;
- : string list = ["a"; "b"; "c"; "a"; "d"; "e"]

# compress ["a";"z";"a";"a";"b";"c";"c";"a";"a";"d";"e";"e";"z";"e";"c";"a";"a";"d";"e";"i";"u";"i"];;
- : string list =
["a"; "z"; "a"; "b"; "c"; "a"; "d"; "e"; "z"; "e"; "c"; "a"; "d"; "e"; "i";
 "u"; "i"]
 
# compress ["a";"o";"o";"a";"o";"o";"o";"a";"a";"a";"e";"e";"o";"e";"a";"a";"a";"e";"e";"i";"i";"i"];;
- : string list = ["a"; "o"; "a"; "o"; "a"; "e"; "o"; "e"; "a"; "e"; "i"]
#


# let rec duplicate = function
        | [] -> []
        | h :: t -> h :: h :: duplicate t;; 
        
val duplicate : 'a list -> 'a list = <fun>
 
#  duplicate ["a";"b";"c";"c";"d"];;
- : string list = ["a"; "a"; "b"; "b"; "c"; "c"; "c"; "c"; "d"; "d"]
#

# let rec at k = function
        | [] -> None
        | h :: t -> if k = 1 then Some h else at (k-1) t;;
        
val at : int -> 'a list -> 'a option = <fun>

# at 3 [ "a" ; "b"; "c"; "d"; "e" ];;
- : string option = Some "c"

# at 3 [ "a" ];;
- : string option = None
#

 ááházán.
Characters 46-47:
Warning 3: deprecated: ISO-Latin1 characters in identifiers
Characters 48-49:
Warning 3: deprecated: ISO-Latin1 characters in identifiers
Characters 50-52:
Warning 3: deprecated: ISO-Latin1 characters in identifiers
Characters 53-55:
Warning 3: deprecated: ISO-Latin1 characters in identifiers
  hgéh
Characters 61-64:
Warning 3: deprecated: ISO-Latin1 characters in identifiers

  Interrupted.
  
# let rec fact n = if n<2 then 1 else n*fact(n-1) ;;
val fact : int -> int = <fun>

# fact 8;;
- : int = 40320


# type foo =
      | Nothing
      | Int of int
      | Pair of int * int
      | String of string;;
type foo = Nothing | Int of int | Pair of int * int | String of string

# String "hello";;
- : foo = String "hello"

# Pair (4, 5);;
- : foo = Pair (4, 5)

# Int 3;;
- : foo = Int 3

# Nothing;;
- : foo = Nothing
#


