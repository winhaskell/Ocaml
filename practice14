let rec fib = function
  | 0 -> 1
  | 1 -> 1
  | n -> fib (n - 1) + fib (n - 2);;
  
# fib 1;;
- : int = 1

# fib 3;;
- : int = 3

# fib 5;;
- : int = 8

# fib 6;;
- : int = 13

https://exercism.io/tracks/ocaml

 
The Language of Types
https://www2.lib.uchicago.edu/keith/ocaml-class/type-sublanguage.html
https://www2.lib.uchicago.edu/keith/ocaml-class/why.html

https://thealmarty.com/2018/06/12/imperative-programming-in-ocaml/

http://www.lsv.fr/~halfon/TP_Prog/OCaml.pdf
http://www.cs.cornell.edu/courses/cs3110/2018fa/textbook/intro/ocaml.html
http://www.cs.cornell.edu/courses/cs3110/2018fa/textbook/basics/interacting.html


# let empty = [];;
val empty : 'a list = []

# 3::empty;;
- : int list = [3]

# let f x y = x + y;;
val f : int -> int -> int = <fun>

# f 3 4;;
- : int = 7

# f 9 88;;
- : int = 97

# let x = [ 2; 8; 5; ];;
val x : int list = [2; 8; 5]

# List.length x;;
- : int = 3

# List.hd x;;
- : int = 2

# List.tl x;;
- : int list = [8; 5]

# 4::x;;
- : int list = [4; 2; 8; 5]

# 1::9::4::x;;
- : int list = [1; 9; 4; 2; 8; 5]

# [ 2; 8; 5; ] @ [ 3; 4; ]
  ;;
- : int list = [2; 8; 5; 3; 4]

# type person = {mutable name:string; mutable age:int };;
type person = { mutable name : string; mutable age : int; }

# let mj = {name="Mary Jane"; age=19 };;
val mj : person = {name = "Mary Jane"; age = 19}

# print_string mj.name;;
Mary Jane- : unit = ()

# fun x y -> x +. y ;;
- : float -> float -> float = <fun>

# (fun x y -> x +. y) 3. 4. ;;
- : float = 7.

# let rec f n = if n == 1 then 1 else n * f (n-1);;
val f : int -> int = <fun>
# f 20;;
- : int = 2432902008176640000
#

# let rec f n = match n with 0 -> 0 | 1 -> 1 | x -> f (n-1) + f (n-2);;
val f : int -> int = <fun>
# f 20;;
- : int = 6765
#

http://caml.inria.fr/pub/docs/oreilly-book/

# let imm_stack init = object
    val v = init

      method pop =
        match v with
        | hd :: tl -> Some (hd, {< v = tl >})
      | [] -> None

      method push hd =
      {< v = hd :: v >}
      end ;;
      
val imm_stack :
  'a list -> (< pop : ('a * 'b) option; push : 'a -> 'b > as 'b) = <fun>
  
# let s = imm_stack [3; 2; 1] ;;
val s : < pop : (int * 'a) option; push : int -> 'a > as 'a = <obj>
# let t = s#push 4 ;;
val t : < pop : (int * 'a) option; push : int -> 'a > as 'a = <obj>
# s#pop ;;
- : (int * (< pop : 'a; push : int -> 'b > as 'b)) option as 'a =
Some (3, <obj>)
#  t#pop ;;
- : (int * (< pop : 'a; push : int -> 'b > as 'b)) option as 'a =
Some (4, <obj>)




# let plus = ( + );;
val plus : int -> int -> int = <fun>

# plus 2 3;;
- : int = 5

#  List.map (plus 2) [1; 2; 3];;
- : int list = [3; 4; 5]


#  List.map (plus 3) [8;9;100];;
- : int list = [11; 12; 103]



当你想用for循环的时候，List.iter 应该是首选。

先定义一个链表：
# let my_list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10];;
val my_list : int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]

用List.iter：
# let f elem =
    Printf.printf "I'm looking at element %d now\n" elem in
    List.iter f my_list;;
    
I'm looking at element 1 now
I'm looking at element 2 now
I'm looking at element 3 now
I'm looking at element 4 now
I'm looking at element 5 now
I'm looking at element 6 now
I'm looking at element 7 now
I'm looking at element 8 now
I'm looking at element 9 now
I'm looking at element 10 now
- : unit = ()



# let rec sumTo (n:int) : int = 
  if n <= 0 then
    0
  else
    n + sumTo (n-1)        
  ;;
val sumTo : int -> int = <fun>
# let _ =
  Printf.printf "The sum of the numbers from 0 to 8 is %d\n" (sumTo 8)  
  ;;
The sum of the numbers from 0 to 8 is 36

- : unit = ()
  
  Printf.printf "The sum of the numbers from 0 to 10 is %d\n" (sumTo 10);; 
The sum of the numbers from 0 to 10 is 55
- : unit = ()

# let _ = Printf.printf "The sum of the numbers from 0 to 100 is %d\n" (sumTo 100);;
The sum of the numbers from 0 to 100 is 5050

- : unit = ()
# let rec sumTo2 (n:int) =  if n <= 0 then
    0
  else
    n + sumTo2 (n-1)      ;;
val sumTo2 : int -> int = <fun>

# let _ = Printf.printf "The sum of the numbers from 0 to 12 is %d\n" (sumTo2 12);;
# let _ = Printf.printf "The sum of the numbers from 0 to 12 is %d\n" (sumTo2 12);;
The sum of the numbers from 0 to 12 is 78
- : unit = ()
# 






















