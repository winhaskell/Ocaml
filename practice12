Ref> https://www.ibm.com/developerworks/cn/linux/sdk/ocaml/part1/index.html

# let rec fact n = if n<2 then 1 else n*fact(n-1) ;;
val fact : int -> int = <fun>

# fact 8;;
- : int = 40320
# fact 5;;
- : int = 120
 
# let rec fact3 n = if n<2 then 1 else n*fact3(n-1);;
val fact3 : int -> int = <fun>

# fact3 6;;
- : int = 720
#
 
上面我们定义了一个 fact 函式。注意看到，O'Caml 用";;"终结一个语句。这一点作者也是不很感冒，
但是";"在 O'Caml 中另有妙用，所以也没有什么办法。著名的 Alan J. Perlis 说过，"Syntactic sugar causes cancer of the semicolon."
这也是没有办法的事情，除非你用 Lisp，但是 Lisp 又有多得让人头晕目眩的圆括号。



# let next x = x+1;;
val next : int -> int = <fun>

# next 6;;
- : int = 7

# let comp f g x = f(g(x));;   复合函数的表达
val comp : ('a -> 'b) -> ('c -> 'a) -> 'c -> 'b = <fun>

# comp fact next 6;;           fact和next函数
- : int = 5040

# comp fact next 7;;
- : int = 40320
#


来自http://bbs.9ria.com/thread-77807-1-1.html

一旦你了解了OCaml便会感到它是一门非常神奇的语言，不过学习它的第一步却是非常困难的。希望这个小小的教程可以让事情变得简单些。
首先OCaml不是一个结构化语言，它属于函数语言家族。纯粹的函数语言没有提供循环机制（你需要使用递归来完成循环），变量也不可改变，以及其它的一些限制。
幸运的是OCaml不是一个纯粹的函数语言因此可以使用循环与更改变量。现在让我们开始OCaml的探险历程吧：）

#号是OCaml解释器的提示符，我们已经启动了它。

Ocaml是强类型语言：这表示变量一旦建立就不能改变类型，并且你不可以在两种不同的类型间进行操作（比如将整数与浮点数相加）。

让我们来作一些基本的数学计算：
#  2 + 2;;
- : int = 4

# 2 + 2.0;;
Error: This expression has type float but an expression was expected of type
         int

# 2.0 + 2;;
Error: This expression has type float but an expression was expected of type
         int
#

# (float_of_int 2) +. 2.5;;
- : float = 4.5
#

# float_of_int;;
- : int -> float = <fun>
#



# let cub x = x*x*x;;
val cub : int -> int = <fun>

# cub 9;;
- : int = 729
# cub 8;;
- : int = 512
# cub 10;;
- : int = 1000
# cub 100;;
- : int = 1000000
#

# cub  ;;
- : int -> int = <fun>
#

# let li = 1 :: 2 :: 3 :: [];;
val li : int list = [1; 2; 3]
# li;;
- : int list = [1; 2; 3]
# 12 :: li;;
- : int list = [12; 1; 2; 3]
# li;;
- : int list = [1; 2; 3]

Polymorphism: sorting lists           对列表排序 插入排序
Insertion sort is defined using two recursive functions.

# let rec sort = function
        | [] -> []
        | x :: l -> insert x (sort l)
    and insert elem = function
      | [] -> [elem]
      | x :: l -> if elem < x then elem :: x :: l
                else x :: insert elem l;;
val sort : 'a list -> 'a list = <fun>
val insert : 'a -> 'a list -> 'a list = <fun>

# sort [2; 100; 90];;
- : int list = [2; 90; 100]

# sort ["yes"; "ok"; "sure"; "ya"; "yep"; "igen"; "yep"];;
- : string list = ["igen"; "ok"; "sure"; "ya"; "yep"; "yep"; "yes"]
#

#  let rec sigma f = function
        | [] -> 0
        | x :: l -> f x + sigma f l;;
        
val sigma : ('a -> int) -> 'a list -> int = <fun>
# sigma (fun x -> x * x) [1; 2; 3; 100];;
- : int = 10014
#
# sigma;;
- : ('a -> int) -> 'a list -> int = <fun>
#

# let rec fib x = if x <= 1 then 1 else fib (x - 1) + fib (x - 2);;
val fib : int -> int = <fun>

# fib 3;;
- : int = 3
# fib 8;;
- : int = 34
# fib 0;;
- : int = 1
# fib 1;;
- : int = 1
# fib 20;;
- : int = 10946
# fib 30;;
- : int = 1346269
# fib 80;;
Interrupted.
# fib 19;;
- : int = 6765
# fib 21;;
- : int = 17711
# fib 22
  ;;
- : int = 28657
# fib 23;;
- : int = 46368
#
# fib(-1);;
- : int = 1
#

Elementary debugging > To conclude, here is the simplest way of spying over functions:
# #trace fib;;  调试fib 是怎么得出计算结果的
fib is now traced.
# fib 5;;
fib <-- 5
fib <-- 3
fib <-- 1
fib --> 1
fib <-- 2
fib <-- 0
fib --> 1
fib <-- 1
fib --> 1
fib --> 2
fib --> 3
fib <-- 4
fib <-- 2
fib <-- 0
fib --> 1
fib <-- 1
fib --> 1
fib --> 2
fib <-- 3
fib <-- 1
fib --> 1
fib <-- 2
fib <-- 0
fib --> 1
fib <-- 1  f0
fib --> 1  f1
fib --> 2  f2
fib --> 3  f3 
fib --> 5  f4 
fib --> 8  f5
- : int = 8
#


# 99 mod 8;;
- : int = 3
# 99 mod 101;;
- : int = 99
# 99 mod 77;;
- : int = 22
# 98 mod 49;;
- : int = 0
# 98 mod 100;;
- : int = 98
#


https://github.com/CompScienceClub/ocaml-red-black-trees



# for i=1 to 10 do
  print_int i
done;;    
12345678910- : unit = ()
# 

# (fun x -> x + 1) 999;;
- : int = 1000
# 

# let diff x y = abs (x - y);;
val diff : int -> int -> int = <fun>
# diff 5 981;;
- : int = 976
# 



# let rev list =
    let rec aux acc = function
      | [] -> acc
      | h::t -> aux (h::acc) t in
    aux [] list;;        
val rev : 'a list -> 'a list = <fun>

#  rev ["a" ; "b" ; "c"];;
- : string list = ["c"; "b"; "a"]

# let is_palindrome list =
    list = List.rev list ;;
val is_palindrome : 'a list -> bool = <fun>

# is_palindrome [ "x" ; "a" ; "m" ; "a" ; "x" ];;
- : bool = true
# is_palindrome [ "x" ; "a" ; "m" ; "a"];;           
- : bool = false
# 



# let rec gcd a b =
    if b = 0 then a else gcd b (a mod b);;  
val gcd : int -> int -> int = <fun>


# gcd 20 2020;;   
- : int = 20
# gcd 101 2020;;  
- : int = 101




--- Huffman code ---
# module Pq = struct
    type 'a t = { data: 'a list array;  mutable first: int }
    let make() = { data = Array.make 101 [];  first = 101 }
  
    let add q p x =
      q.data.(p) <- x :: q.data.(p);  q.first <- min p q.first
  
    let get_min q =
      if q.first = 101 then None
      else
        match q.data.(q.first) with
        | [] -> assert false
        | x :: tl ->
           let p = q.first in
           q.data.(q.first) <- tl;
           while q.first < 101 && q.data.(q.first) = [] do
             q.first <- q.first + 1
           done;
           Some(p, x)
  end
  
  type tree =
    | Leaf of string
    | Node of tree * tree
  
  let rec huffman_tree q =
    match Pq.get_min q, Pq.get_min q with
    | Some(p1, t1), Some(p2, t2) -> Pq.add q (p1 + p2) (Node(t1, t2));
                                   huffman_tree q
    | Some(_, t), None | None, Some(_, t) -> t
    | None, None -> assert false
  
  (* Build the prefix-free binary code from the tree *)
  let rec p                                                                  on
    | Leaf s -> [(s, prefix)]
    | Node(t0, t1) -> prefixes_of_tree (prefix ^ "0") t0
                     @ prefixes_of_tree (prefix ^ "1") t1
  
  let huffman fs =
    if List.fold_left (fun s (_,p) -> s + p) 0 fs <> 100 then
      failwith "huffman: sum of weights must be 100";
    let q = Pq.make() in
    List.iter (fun (s,f) -> Pq.add q f (Leaf s)) fs;
    prefixes_of_tree "" (huffman_tree q);;                    
module Pq :
  sig
    type 'a t = { data : 'a list array; mutable first : int; }
    val make : unit -> 'a t
    val add : 'a t -> int -> 'a -> unit
    val get_min : 'a t -> (int * 'a) option
  end
type tree = Leaf of string | Node of tree * tree
val huffman_tree : tree Pq.t -> tree = <fun>
val prefixes_of_tree : string -> tree -> (string * string) list = <fun>
val huffman : (string * int) list -> (string * string) list = <fun>
 
# let fs = [ ("a", 45); ("b", 13); ("c", 12); ("d", 16);
             ("e", 9); ("f", 5) ];;  
val fs : (string * int) list =
  [("a", 45); ("b", 13); ("c", 12); ("d", 16); ("e", 9); ("f", 5)]
  
# huffman fs;;
- : (string * string) list =
[("a", "0"); ("c", "100"); ("b", "101"); ("f", "1100"); ("e", "1101");
 ("d", "111")]
 
# huffman ["a", 10;  "b", 15;  "c", 30;  "d", 16;  "e", 29];;
- : (string * string) list =
[("d", "00"); ("a", "010"); ("b", "011"); ("e", "10"); ("c", "11")]

# huffman ["a", 10;  "b", 23; "c",66; "d",45; "e", 33];;     
Exception: Failure "huffman: sum of weights must be 100".
#   







