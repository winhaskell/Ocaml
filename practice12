Ref> https://www.ibm.com/developerworks/cn/linux/sdk/ocaml/part1/index.html

# let rec fact n = if n<2 then 1 else n*fact(n-1) ;;
val fact : int -> int = <fun>

# fact 8;;
- : int = 40320
# fact 5;;
- : int = 120
 
# let rec fact3 n = if n<2 then 1 else n*fact3(n-1);;
val fact3 : int -> int = <fun>

# fact3 6;;
- : int = 720
#
 
上面我们定义了一个 fact 函式。注意看到，O'Caml 用";;"终结一个语句。这一点作者也是不很感冒，
但是";"在 O'Caml 中另有妙用，所以也没有什么办法。著名的 Alan J. Perlis 说过，"Syntactic sugar causes cancer of the semicolon."
这也是没有办法的事情，除非你用 Lisp，但是 Lisp 又有多得让人头晕目眩的圆括号。



# let next x = x+1;;
val next : int -> int = <fun>

# next 6;;
- : int = 7

# let comp f g x = f(g(x));;   复合函数的表达
val comp : ('a -> 'b) -> ('c -> 'a) -> 'c -> 'b = <fun>

# comp fact next 6;;           fact和next函数
- : int = 5040

# comp fact next 7;;
- : int = 40320
#


来自http://bbs.9ria.com/thread-77807-1-1.html

一旦你了解了OCaml便会感到它是一门非常神奇的语言，不过学习它的第一步却是非常困难的。希望这个小小的教程可以让事情变得简单些。
首先OCaml不是一个结构化语言，它属于函数语言家族。纯粹的函数语言没有提供循环机制（你需要使用递归来完成循环），变量也不可改变，以及其它的一些限制。
幸运的是OCaml不是一个纯粹的函数语言因此可以使用循环与更改变量。现在让我们开始OCaml的探险历程吧：）

#号是OCaml解释器的提示符，我们已经启动了它。

Ocaml是强类型语言：这表示变量一旦建立就不能改变类型，并且你不可以在两种不同的类型间进行操作（比如将整数与浮点数相加）。

让我们来作一些基本的数学计算：
#  2 + 2;;
- : int = 4

# 2 + 2.0;;
Error: This expression has type float but an expression was expected of type
         int
#
