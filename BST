Binary Search Tree (BST) is one of the most classic data structures. The definition for its structure is shown as below:

http://typeocaml.com/2014/12/19/how-to-become-a-bst-ninja-genin/
https://haifengl.wordpress.com/2014/07/07/ocaml-algebraic-data-types/

It consists of Nodes and Leaves.
A Node has a child bst on the left side, a key (, a data), and a child bst on the right side. Note here a node's left or right
child is not a node, instead, is indeed another binary search tree.
A Leaf has nothing but act only as a STOP sign.


# type 'a bst_t =  
  | Leaf
  | Node of 'a bst_t * 'a * 'a bst_t     ;;
type 'a bst_t = Leaf | Node of 'a bst_t * 'a * 'a bst_t
# 


The important feature that makes BST unique is for any node 
all keys from its left child are smaller than its own key
all keys from its right child are bigger (assumming keys are distinct)

# let rec insert x = function  
  | Leaf -> Node (Leaf, x, Leaf) (* Leaf is a STOP *)
  | Node (left, k, right) ->
    if x < k then Node (insert x left, k, right) (* if x is smaller, go left *)
    else Node (left, k, insert x right) (* otherwise, go right *)        ;;
val insert : 'a -> 'a bst_t -> 'a bst_t = <fun>
# 

# let rec mem x = function  
  | Leaf -> false
  | Node (left, k, right) -> if x < k then mem x left else if x = k then true else mem x right ;;
val mem : 'a -> 'a bst_t -> bool = <fun>
# 

# let rec height = function  
  | Leaf -> 0
  | Node (left, _, right) -> 1 + max (height left) (height right)    ;;
val height : 'a bst_t -> int = <fun>



# let rec from_depth d cur_d = function  
  | Leaf -> []
  | Node (left, k, right) ->
    if cur_d = d then [k]
    else from_depth d (cur_d + 1) left @ from_depth d (cur_d + 1) right  ;;
val from_depth : int -> int -> 'a bst_t -> 'a list = <fun>
# 


# let all_keys_at depth bst = from_depth depth 0 bst  ;;
val all_keys_at : int -> 'a bst_t -> 'a list = <fun>
# 




# open Queue;;
# type tree =
        |Leaf
        |Node of tree * int * tree

    ;;
type tree = Leaf | Node of tree * int * tree

# let rec insert r n =
        match r with
        |Leaf->Node(Leaf, n,Leaf)
        |Node(left,value,right)-> if n < value then Node((insert left n), value,right)
                                   else if n > value then Node(left, value,(insert right n))
                                   else Node(left,value,right)
    ;;
val insert : tree -> int -> tree = <fun>

# let rec count t =
        match t with
                Leaf->0
                |Node(l,v,r)-> 1+ count l + count r
;;
val count : tree -> int = <fun>

# let rec height t=
        match t with
        |Leaf -> (-1)
        |Node(l,v,r)->1 + max (height l) (height r)
;;
val height : tree -> int = <fun> 

# let rec inorder t =
        match t with
        |Leaf->print_string ""
        |Node(l,v,r)->
                   (inorder l);
                 print_string (string_of_int v);print_string "->";
                   (inorder r)
    ;;
val inorder : tree -> unit = <fun>
#
  ;;
  
# let rec preorder t =
        match t with
        |Leaf->print_string ""
        |Node(l,v,r)->
                        print_string (string_of_int v);print_string "->";
                        (preorder l);
                        (preorder r)
;;
  val preorder : tree -> unit = <fun>
  
# let rec postorder t =
        match t with
        |Leaf->print_string ""
        |Node(l,v,r)->
                        (postorder l);
                        (postorder r);
                        print_string (string_of_int v);print_string "->";
;;
val postorder : tree -> unit = <fun>

# let rec aux queue =
                if Queue.is_empty queue then () else
                let c = Queue.pop queue in
                        match c with
                        |Leaf ->aux queue
                        |Node(l,v,r)->print_int v; print_string ",";
                                        let _= Queue.push l queue in
                                        let _ = Queue.push r queue in
                        aux queue
  ;;
val aux : tree Queue.t -> unit = <fun>

# let print_level_order t=
        let q=Queue.create () in let _ = Queue.push t q in
        aux q; print_string "\n"
;;

val print_level_order : tree -> unit = <fun>

# let root = List.fold_left insert Leaf [100;50;200;10;60;250;300];;
val root : tree =
  Node (Node (Node (Leaf, 10, Leaf), 50, Node (Leaf, 60, Leaf)), 100,
  Node (Leaf, 200, Node (Leaf, 250, Node (Leaf, 300, Leaf))))
  
# preorder root;;
100->50->10->60->200->250->300->- : unit = ()
# inorder root;;
10->50->60->100->200->250->300->- : unit = ()
# postorder root;;
10->60->50->300->250->200->100->- : unit = ()
# print_level_order root;;
100,50,200,10,60,250,300,
- : unit = ()






