The Basics -- Running OCaml code

# 2.2+.2.2;;
- : float = 4.4

# 9+.9.9;;
Error: This expression has type int but an expression was expected of type
         float

# 9.0+.9.9;;
- : float = 18.9

# 


# let isUru y=
  if (y mod 4) = 0 then
        not(y mod 100 = 0 && not(y mod 400 = 0))
  else false;;
;;

val isUru : int -> bool = <fun>

# isUru 2021
  ;;
- : bool = false
# isUru 2004;;
Characters 0-1:
  isUru 2004;;
  ^
Error: Illegal character (\027)
# isUru 2020
  ;;
- : bool = true
# isUru 2004
  ;;
Characters 0-1:
  isUru 2004
  ^
Error: Illegal character (\027)
# isUru 2004
  ;;
- : bool = true
# isUru 2017
  ;;
- : bool = false
# isUru 2018
  ;;
- : bool = false
# isUru 1900
  ;;
- : bool = false
# isUru 1888
  ;;
- : bool = true
#


Basic types
The basic types in OCaml are:

OCaml type  Range

int         31-bit signed int (roughly +/- 1 billion) on 32-bit
            processors, or 63-bit signed int on 64-bit processors
float       IEEE double-precision floating point, equivalent to C's double
bool        A boolean, written either true or false
char        An 8-bit character
string      A string
unit        Written as ()


--------------------------------------------------------------------


# let isUru y=
  if (y mod 4) = 0 then
        not(y mod 100 = 0 && not(y mod 400 = 0))
  else false;;
  ;;
val isUru : int -> bool = <fun>

# isUru 2020;;
- : bool = true
# isUru 2017;;
- : bool = false
# isUru 1996;;
- : bool = true
# isUru 2018;;
- : bool = false
# isUru 2021;;
- : bool = false
# 



# let lastDay y m =
  let arrayOfLastDay = [|31; 28; 31; 30; 31; 30; 31; 31; 30; 31; 30; 31|] in
      if (isUru y) then arrayOfLastDay.(1) <- 29;
    arrayOfLastDay.(m - 1);;
val lastDay : int -> int -> int = <fun>


# lastDay 2018 10;;
- : int = 31
# lastDay 2017 9;;
- : int = 30
# lastDay 2018 10;;       
- : int = 31
# lastDay 2018 08;;
- : int = 31
# lastDay 2020 02;;
- : int = 29
# lastDay 2021 02;;
- : int = 28
# 




# let rec sort lst =
    match lst with
          [] -> []
      | head :: tail -> insert head (sort tail)
    and insert elt lst =
      match lst with
        [] -> [elt]
      | head :: tail -> if elt <= head then elt :: lst else head :: insert elt tail
    ;;
val sort : 'a list -> 'a list = <fun>
val insert : 'a -> 'a list -> 'a list = <fun>
# sort [6;2;5;3];;
- : int list = [2; 3; 5; 6]

# let pi = 4.0 *. atan 1.0;;
val pi : float = 3.1415926535897931
#

type 'a bst =  
  | Leaf 
  | Node of 'a bst * 'a * 'a bst



# let an = ["cat";"bird";"elephant"];;
val an : string list = ["cat"; "bird"; "elephant"]

# List.map String.length an;;
- : int list = [3; 4; 8]

# 1::2::3::[];;
- : int list = [1; 2; 3]

# [1;2;3] @ [4;5;7;9;11];; 
- : int list = [1; 2; 3; 4; 5; 7; 9; 11]

# let rec sum lst = match lst with
  |[]-> 0
  |h::tail -> h + sum tail;;    
val sum : int list -> int = <fun>
# sum [1;2;3;4;5;6;7];;
- : int = 28
# 








