# let x = "global\n";;
val x : string = "global\n"
# let foo () = print_string x;;
val foo : unit -> unit = <fun>
# foo ();;
global
- : unit = ()
# let foo n = fun x -> n * x;;
val foo : int -> int -> int = <fun>
# let foo10 = foo 10;;
val foo10 : int -> int = <fun>
# foo10 100;;
- : int = 1000
# let foo5 = foo 5;;
val foo5 : int -> int = <fun>
# foo5 11;;
- : int = 55
# let compose f g x = g (f x);;
val compose : ('a -> 'b) -> ('b -> 'c) -> 'a -> 'c = <fun>
# let foo x = 2 * x + 1;;
val foo : int -> int = <fun>
# let bar y = y * y + 3 * y;;
val bar : int -> int = <fun>
# bar (foo 4);;
- : int = 108
# let baz = compose foo bar;;
val baz : int -> int = <fun>
   baz 4;;
Characters 0-1:
   baz 4;;
  ^
Error: Illegal character (\022)
#  baz 4;;
- : int = 108
#


異なる n 個の順列の総数は、n の階乗 (n!) だけあります。たとえば、3 つの整数 1, 2, 3 の順列は次に示すように 6 通りあります。

1 2 3,  1 3 2,  2 1 3,  2 3 1,  3 1 2,  3 2 1

順列の生成 (1)

(* int list の表示 *)
let print_intlist xs =
  List.iter (fun x -> print_int x; print_string " ") xs;
  print_newline ()

(* リストから要素を削除する *)
let rec remove x = function
  [] -> []
| y :: ys -> if x = y then remove x ys else y :: remove x ys

(* 順列の生成 *)
let gen_perm n xs f = 
  let rec perm n xs a =
    if n = 0 then f (List.rev a)
    else List.iter (fun x -> perm (n - 1) (remove x xs) (x :: a)) xs
  in
    perm n xs []
    
高階関数 iter の定義

let rec iter f = function
  [] -> ()
| x :: xs -> f x; iter f xs


let remove x xs = List.filter (fun y -> x <> y) xs

# gen_perm 3 [1; 2; 3] print_intlist;;
1 2 3
1 3 2
2 1 3
2 3 1
3 1 2
3 2 1
- : unit = ()

****************************************************************************************

# (* int list の表示 *)
let print_intlist xs =
      List.iter (fun x -> print_int x; print_string " ") xs;
  print_newline ()

  (* リストから要素を削除する *)
  let rec remove x = function
  [] -> []
    | y :: ys -> if x = y then remove x ys else y :: remove x ys

    (* 順列の生成 *)
  let gen_perm n xs f =
  let rec perm n xs a =
        if n = 0 then f (List.rev a)
    else List.iter (fun x -> perm (n - 1) (remove x xs) (x :: a)) xs
    in
    perm n xs []    ;;
    
val print_intlist : int list -> unit = <fun>
val remove : 'a -> 'a list -> 'a list = <fun>
val gen_perm : int -> 'a list -> ('a list -> unit) -> unit = <fun>

# let rec iter f = function
  [] -> ()
  | x :: xs -> f x; iter f xs  ;;
  
val iter : ('a -> 'b) -> 'a list -> unit = <fun>

# let remove x xs = List.filter (fun y -> x <> y) xs;;

val remove : 'a -> 'a list -> 'a list = <fun>

# gen_perm 3 [1; 2; 3] print_intlist;;

1 2 3
1 3 2
2 1 3
2 3 1
3 1 2
3 2 1
- : unit = ()
#




let max (n : int) (m : int) : int =

  if n > m then n else m;;      
val max : int -> int -> int = <fun>
# max 8 9;;
- : int = 9
# et message = "Hello world";;

# rintf "%s\n" message)
  (printf "%s\n" message)ld";;
  ror: Unbound value et
        
  let message = "Hello world";;
Error: Syntax error
# open Printf
  let message = "Hello world";;
val message : string = "Hello world"
# (printf "%s\n" message)
  ;;
Hello world
- : unit = ()
# let max (n : int) (m : int) : int =

  if n > m then n else m;;

# 
   
  rintf "Should be 5: %d\n" (max 5 4));
  (printf "Should be 5: %d\n" (max 5 4));
  rintf "Should be 4: %d\n" (max 3 4));
  (printf "Should be 4: %d\n" (max 3 4));
  rintf "Should be 4: %d\n" (max 4 4));
  (printf "Should be 4: %d\n" (max 4 4));
    val max : int -> int -> int = <fun>
                    
 
# let rec factorial (n : int) : int =

  if n <= 1 then 1

  else n * (factorial (n - 1));;

        val factorial : int -> int = <fun>
#   
  (factorial 3);;
- : int = 6
# (factorial 8);;  
- : int = 40320
# (factorial 10);; 
- : int = 3628800
# 





