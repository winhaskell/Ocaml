https://ocaml.org/learn/tutorials/99problems.html

Write a function last : 'a list -> 'a option that returns the last element of a list. (easy)
# let rec last = function
    | [] -> None
    | [x] -> Some x
    | _ :: t -> last t;;
val last : 'a list -> 'a option = <fun>

# last [ "a" ; "b" ; "c" ; "d" ];;
- : string option = Some "d"
# last [];;
- : 'a option = None
# last [ "a" ; "b" ; "c" ; "d" ; "g"];;
- : string option = Some "g"

# let rec last = function
    | [] -> None
      | [x] -> Some x
        | _ :: t -> last t;;
        
val last : 'a list -> 'a option = <fun>

# last [ "a" ; "b" ; "c" ; "d" ];;
- : string option = Some "d"
# last [];;
- : 'a option = None


Find the last but one (last and penultimate) elements of a list. (easy)
# let rec last_two = function
    | [] | [_] -> None
        | [x;y] -> Some (x,y)
    | _::t -> last_two t;;
  ;;
  
val last_two : 'a list -> ('a * 'a) option = <fun>

# last_two [ "a" ; "b" ; "c" ; "d" ];;
- : (string * string) option = Some ("c", "d")
# last_two [ "a" ];;
- : (string * string) option = None


Find the number of elements of a list. (easy)
# let length list =
    let rec aux n = function
          | [] -> n
        | _::t -> aux (n+1) t
    in aux 0 list;;
  ;;
  
val length : 'a list -> int = <fun>

# length [ "a" ; "b" ; "c"];;
- : int = 3

# length [];;
- : int = 0
#


Reverse a list. (easy)
# let rev list =
    let rec aux acc = function
      | [] -> acc
      | h::t -> aux (h::acc) t in
    aux [] list;;
val rev : 'a list -> 'a list = <fun>

# rev ["a" ; "b" ; "c"];;
- : string list = ["c"; "b"; "a"]
# rev ["k" ; "i" ; "g"];;
- : string list = ["g"; "i"; "k"]
#


Find out whether a list is a palindrome. (easy)

# let rev list =
    let rec aux acc = function
          | [] -> acc
        | h::t -> aux (h::acc) t in
    aux [] list;;
  ;;
val rev : 'a list -> 'a list = <fun>

# let is_palindrome list = list = List.rev list;;

val is_palindrome : 'a list -> bool = <fun>

# is_palindrome [ "x" ; "a" ; "m" ; "a" ; "x" ];;
- : bool = true
# not (is_palindrome [ "a" ; "b" ]);;
- : bool = true
# (is_palindrome [ "a" ; "l" ]);;
- : bool = false
# is_palindrome [ "c" ; "a" ; "a" ; "y" ; "x" ];;
- : bool = false
#

