https://ocaml.org/learn/tutorials/99problems.html

Write a function last : 'a list -> 'a option that returns the last element of a list. (easy)
# let rec last = function
    | [] -> None
    | [x] -> Some x
    | _ :: t -> last t;;
val last : 'a list -> 'a option = <fun>

# last [ "a" ; "b" ; "c" ; "d" ];;
- : string option = Some "d"
# last [];;
- : 'a option = None
# last [ "a" ; "b" ; "c" ; "d" ; "g"];;
- : string option = Some "g"

# let rec last = function
    | [] -> None
      | [x] -> Some x
        | _ :: t -> last t;;
        
val last : 'a list -> 'a option = <fun>

# last [ "a" ; "b" ; "c" ; "d" ];;
- : string option = Some "d"
# last [];;
- : 'a option = None


Find the last but one (last and penultimate) elements of a list. (easy)
# let rec last_two = function
    | [] | [_] -> None
        | [x;y] -> Some (x,y)
    | _::t -> last_two t;;
  ;;
  
val last_two : 'a list -> ('a * 'a) option = <fun>

# last_two [ "a" ; "b" ; "c" ; "d" ];;
- : (string * string) option = Some ("c", "d")
# last_two [ "a" ];;
- : (string * string) option = None


Find the number of elements of a list. (easy)
# let length list =
    let rec aux n = function
          | [] -> n
        | _::t -> aux (n+1) t
    in aux 0 list;;
  ;;
  
val length : 'a list -> int = <fun>

# length [ "a" ; "b" ; "c"];;
- : int = 3

# length [];;
- : int = 0
#


Reverse a list. (easy)
# let rev list =
    let rec aux acc = function
      | [] -> acc
      | h::t -> aux (h::acc) t in
    aux [] list;;
val rev : 'a list -> 'a list = <fun>

# rev ["a" ; "b" ; "c"];;
- : string list = ["c"; "b"; "a"]
# rev ["k" ; "i" ; "g"];;
- : string list = ["g"; "i"; "k"]
#


Find out whether a list is a palindrome. (easy)

# let rev list =
    let rec aux acc = function
          | [] -> acc
        | h::t -> aux (h::acc) t in
    aux [] list;;
  ;;
val rev : 'a list -> 'a list = <fun>

# let is_palindrome list = list = List.rev list;;

val is_palindrome : 'a list -> bool = <fun>

# is_palindrome [ "x" ; "a" ; "m" ; "a" ; "x" ];;
- : bool = true
# not (is_palindrome [ "a" ; "b" ]);;
- : bool = true
# (is_palindrome [ "a" ; "l" ]);;
- : bool = false
# is_palindrome [ "c" ; "a" ; "a" ; "y" ; "x" ];;
- : bool = false
#


# type t =
  | Male
  | Female;;    
type t = Male | Female

# let fst (x, _) = x;;
val fst : 'a * 'b -> 'a = <fun>

# let snd (_, y) = y;;
val snd : 'a * 'b -> 'b = <fun>

# let eq_pair = function
    | (x, x) -> true
    | _ -> false;;  
Error: Variable x is bound several times in this matching

# let eq_pair = function
  | (x, y) when x = y -> true
  | _ -> false;;    
val eq_pair : 'a * 'a -> bool = <fun>



# let is_upper = function
  | 'A' .. 'Z' -> true
  | _ -> false;;    
val is_upper : char -> bool = <fun>

# let rec fib = function
  | (0 | 1) as i -> i
  | i -> fib(i-2) + fib(i-1);;    
val fib : int -> int = <fun>

# fib
  ;;
- : int -> int = <fun>

# fib 23;;
- : int = 28657
# fib 4
  ;;
- : int = 3
# fib 0;;
- : int = 0
# fib 1;;
- : int = 1
# fib 2;;
- : int = 1
# fib 3;;
- : int = 2
 
# fib 9;;
- : int = 34
# fib 10;;
- : int = 55
# fib 11;;
- : int = 89
# fib 12;;
- : int = 144
# 

# let (+) x y = x - y;;
val ( + ) : int -> int -> int = <fun>
# 1 +2;;
- : int = -1
# 1-2;;
- : int = -1


# let sqr x = x *. x;;
val sqr : float -> float = <fun>

# let (|>) x f = f x ;;
val ( |> ) : 'a -> ('a -> 'b) -> 'b = <fun>
 
# 1. |> (+.) 2. |> sqr;;
- : float = 9.
# 
# 1. |> (+.) 2;;
Error: This expression has type int but an expression was expected of type float
# 
# 4.|> sqr;;
- : float = 16.

# 99|> sqr;;
Error: This expression has type float -> float but an expression was expected of type int -> 'a

# 99.|> sqr;;
- : float = 9801.
# 


# let rec gcd a b = if b=0 then a else gcd b (a mod b);;
val gcd : int -> int -> int = <fun>

# gcd 999 33;;
- : int = 3

# gcd 10 20;;
- : int = 10
#


#  let rec compress = function
      | a :: (b :: _ as t) -> if a = b then compress t else a :: compress t
      | smaller -> smaller;;
val compress : 'a list -> 'a list = <fun>

# compress ["a";"b";"a";"a";"c";"c";"c";"d";"d";"d";"e";"h";"h";"h"];;
- : string list = ["a"; "b"; "a"; "c"; "d"; "e"; "h"]
#







