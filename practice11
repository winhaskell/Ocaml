https://ocaml.org/learn/tutorials/99problems.html

--------------------------------------------------------------------------------------------------------------------
Sum multiples of 3 and 5

TaskSum multiples of 3 and 5
You are encouraged to solve this task according to the task description, using any language you may know.

Task
The objective is to write a function that finds the sum of all positive multiples of 3 or 5 below n.

Show output for n = 1000.
Extra credit: do this efficiently for n = 1e20 or higher. 


# let sum_mults n =
        let sum = ref 0 in
            for i = 3 to (n - 1) do
                  if (i mod 3) = 0 || (i mod 5) = 0 then
                        sum := !sum + i;
            done;
          !sum;;
          
val sum_mults : int -> int = <fun>

# print_endline (string_of_int (sum_mults 1000));;

233168

- : unit = ()
#



--------------------------------------------------------------------------------------------------------------------
Write a function last : 'a list -> 'a option that returns the last element of a list. (easy)
# let rec last = function
     | [ ]    -> None
     | [x]    -> Some x
     | _ :: t -> last t;;

val last : 'a list -> 'a option = <fun>

# last [ "a" ; "b" ; "c" ; "d" ];;
- : string option = Some "d"

# last [];;
- : 'a option = None

# last ["ad"];;
- : string option = Some "ad"

# last ["ad", "!!!!!"];;
- : (string * string) option = Some ("ad", "!!!!!")

# last ["ad"; "!!!!!"];;
- : string option = Some "!!!!!"

# last ["ad"; "!!!!!"];;
- : string option = Some "!!!!!"

--------------------------------------------------------------------------------------------------------------------
Find the last but one (last and penultimate) elements of a list. (easy)
# let rec last_two = function
    | [] | [_] -> None
        | [x;y] -> Some (x,y)
      | _::t -> last_two t;;
val last_two : 'a list -> ('a * 'a) option = <fun>

# last_two [ "a" ];;
- : (string * string) option = None

# last_two [ "a" ; "b" ; "c" ; "d" ];;
- : (string * string) option = Some ("c", "d")

# last_two [ "a" ; "a"];;
- : (string * string) option = Some ("a", "a")

# last_two [ "a" ; "a"; "a"];;
- : (string * string) option = Some ("a", "a")

--------------------------------------------------------------------------------------------------------------------

Find the k'th element of a list. (easy)
# let rec at k = function
    | [] -> None
        | h :: t -> if k = 1 then Some h else at (k-1) t;;
        
val at : int -> 'a list -> 'a option = <fun>

# at 3 [ "a" ];;
- : string option = None

# at 1 [ "a" ];;
- : string option = Some "a"

# at 3 [ "a" ; "b"; "c"; "d"; "e" ];;
- : string option = Some "c"

# Interrupted. --------------------------------------------------------------------------------------------------------------------

Find the number of elements of a list. (easy)
# let length list =
    let rec aux n = function
          | []   -> n
          | _::t -> aux (n+1) t
        in aux 0 list;;
      
val length : 'a list -> int = <fun>

# length [ "a" ; "b" ; "c"];;
- : int = 3

# length [];;
- : int = 0

# length [ "a" ; "b" ; "c"; "a" ; "b" ; "c" ];;
- : int = 6
 

# length [ "a" ; "b" ; "c"; "b" ; "c"; "b" ; "c"];;
- : int = 7

