# sqrt(2.0);;
- : float = 1.4142135623730951
# (sqrt(3.0 +. 1.0) +. 4.0) /. 3.0;;
- : float = 2.
# log(1.0);;
- : float = 0.
# exp(1.0)
  ;;
Characters 9-10:
  ;;
  ^
Error: Illegal character (\027)
# exp(1.0);;
- : float = 2.7182818284590451
# let rec sum(n) =
if n = 1 then 1 else sum(n - 1) + n;;
  ;;
val sum : int -> int = <fun>
# sum(100);;
- : int = 5050
#


# 1 :: (2 :: (3 :: [])) ;;
- : int list = [1; 2; 3]
# 1 :: 2 :: 3 :: [] ;;
- : int list = [1; 2; 3]
#
# 1 :: 2 :: 3 ::6 ::66:: [];;
- : int list = [1; 2; 3; 6; 66]
#


#
  "three" :: empty;;
- : string list = ["three"]
#  let l = 1 :: 2 :: 3 ::4::5[];;
val l : int list = [1; 2; 3]
# let m = 0 :: l;;
val m : int list = [0; 1; 2; 3]
# l;;
- : int list = [1; 2; 3]
# let rec sum l =
    match l with
        | [] -> 0
      | hd :: tl -> hd + sum tl
  ;;
  ;;
val sum : int list -> int = <fun>
# sum [1;2;3];;
- : int = 6


# let max a b =
    if a > b then a else b;;
  ;;
Characters 0-1:
  let max a b =
  ^
Error: Illegal character (\022)
# let max a b =
    if a > b then a else b;;
  ;;
val max : 'a -> 'a -> 'a = <fun>
# max 88 9
  ;;
- : int = 88
# max 8 99;;
- : int = 99
# max 100 99;;
- : int = 100
#

# let max a b =
    if a > b then a else b;;
  ;;
val max : 'a -> 'a -> 'a = <fun>
# max "a" "b";;
- : string = "b"


# let my_list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10];;
val my_list : int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]
# List.map (( * ) 2) my_list;;
- : int list = [2; 4; 6; 8; 10; 12; 14; 16; 18; 20]
# let is_even i =
    i mod 2 = 0 in
      List.filter is_even my_list;;
- : int list = [2; 4; 6; 8; 10]

# 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10;;
- : int = 55

#  let sum = List.fold_left ( + ) 0;;
val sum : int list -> int = <fun>
# let product = List.fold_left ( * ) 1;;
val product : int list -> int = <fun>

# sum my_list;;
- : int = 55
# product my_list;;
- : int = 3628800

# let fact n = product (range 1 n);;
Characters 22-27:
  let fact n = product (range 1 n);;
                        ^^^^^
Error: Unbound value range
Hint: Did you mean raise?
# let rec range a b =
    if a > b then []
        else a :: range (a+1) b;;
val range : int -> int -> int list = <fun>
# let fact n = product (range 1 n);;
val fact : int -> int = <fun>
# fact 10;;
- : int = 3628800


# let fact n = product (range 1 n);;
val fact : int -> int = <fun>
# fact 20;;
- : int = 2432902008176640000
